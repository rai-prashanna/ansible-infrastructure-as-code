---

  - name: create ec2 instances as defined in ec2_quantity
    local_action:
     module: ec2
     image: "{{ aws_image }}"
     instance_type: "{{ ec2_instance_type }}"
     aws_access_key: "{{ aws_access_key }}"
     aws_secret_key: "{{ aws_secret_key }}"
     keypair: "{{ aws_keypair }}"
     count: "{{ ec2_quantity }}"
     instance_tags: "{{ ec2_instance_tag }}"
     region: "{{ aws_region }}"
     group: "{{ security_group }}"
     vpc_subnet_id: "{{ aws_vpc_subnet }}"
     wait: true
    register: ec2_info
    
  - debug: var=ec2_info
  - debug: var=item
    with_items: ec2_info.instance_ids   

  - add_host: hostname={{ item.public_ip }} groupname={{ app_name }}_{{ server_env }}
    with_items: ec2_info.instances
   
  - name: Add mappings to /etc/ansible/hosts
    become: true
    blockinfile:
      dest: /etc/ansible/hosts 
      marker: ""
      insertafter: "EOF"
      content: |
       [aws]
  - name: Add mappings to /etc/ansible/hosts
    become: true
    blockinfile:
      dest: /etc/ansible/hosts 
      marker: ""
      insertafter: "EOF"
      content: |
       {{ item.public_ip }} ansible_ssh_private_key_file=~/.ssh/fuse-code-challenge-key-pair.pem ansible_ssh_user=ec2-user
    with_items: ec2_info.instances  

  - name: checking for ssh connections in port 22 
    wait_for:
     state: started
     host: "{{ item.public_ip }}"
     port: 22
    with_items: ec2_info.instances
  
  - name: Refresh inventory to ensure new instaces exist in inventory
    meta: refresh_inventory
   

#  - name: making relevant directory
#    hosts: ec2_info.instances.public_ip
#    vars:
#     ansible_ssh_private_key_file: "/home/ansible/.ssh/fuse-code-challenge-key-pair.pem"
#    become: true
#    file:
#     path: "{{ item }}"
#     state: directory
#     mode: 0777
#    with_items:
#    - /home/ec2-user/mongo/monogdata
#    - /home/ec2-user/mongo/monogLog

#
#  - name: extract archive file into ~/mongo
#    become: true
#    become_user: "{{ remoteuser }}"
#    become_method: sudo
#    unarchive:
#      src: "{{ mongourl }}"
#      dest: ~/mongo
#      mode: 0777
#      remote_src: yes    
#     
#  - name: insert/update configuration using a local file
#    become_user: "{{ remoteuser }}"
#    blockinfile:
#      block: "{{ lookup('file', '../files/bashrc.txt') }}"
#      dest: "~/.bashrc"
#      backup: yes
#      marker: "# {mark} ANSIBLE MANAGED BLOCK "
#      insertafter: "EOF"   


  